<?xml version="1.0" ?>
<osw-external name="SDIFBuffer" package="sdif">
<description>Loads an SDIF stream (or streams)</description>
<copyright>
Copyright (c) 2001 Amar Chaudhary. All rights reserved.
Copyright (c) 1998-2001 Regents of the University of California.
All rights reserved.

     ``The contents of this file are subject to the Open Sound World Public
     License Version 1.0 (the "License"); you may not use this file except in
     compliance with the License. A copy of the License should be included
     in a file named "License" or "License.txt" in the distribution from 
     which you obtained this file. 

     Software distributed under the License is distributed on an "AS IS"
     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
     License for the specific language governing rights and limitations
     under the License.

     The Original Code is Open Sound World (OSW) software.

     The Initial Developer of the Original Code is Amar Chaudhary.
     Portions created by Amar Chaudhary are Copyright (C) 1998-2001 
     Regents of the University of California and Amar Chaudhary. 
     All Rights Reserved.

     Contributor(s):



From the UC Regents:

Permission to use, copy, modify, and distribute this software and its
documentation, without fee and without a signed licensing agreement, is hereby
granted, provided that the above copyright notice, this paragraph and the
following two paragraphs appear in all copies, modifications, and
distributions.  Contact The Office of Technology Licensing, UC Berkeley, 2150
Shattuck Avenue, Suite 510, Berkeley, CA 94720-1620, (510) 643-7201, for
commercial licensing opportunities.

Written by Amar Chaudhary, The Center for New Music and Audio Technologies, 
University of California, Berkeley.

     IN NO EVENT SHALL REGENTS BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
     SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST
     PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
     DOCUMENTATION, EVEN IF REGENTS HAS BEEN ADVISED OF THE POSSIBILITY OF
     SUCH DAMAGE.

     REGENTS SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     FOR A PARTICULAR PURPOSE. THE SOFTWARE AND ACCOMPANYING
     DOCUMENTATION, IF ANY, PROVIDED HEREUNDER IS PROVIDED "AS IS".
     REGENTS HAS NO OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES,
     ENHANCEMENTS, OR MODIFICATIONS.

</copyright>
<inherit class="datasource" />
<state name="num_streams" type="Integer" description="Number of streams in SDIF Buffer" />
<state name="stream_info" type="String" default="!quot!quot" description="string containing stream info in (ID frameType) pairs" />
<inherited-state name="src" type="String" default="none" description="External Data Source" />
<xblock name="drawCodeTcl"></xblock>
<xblock name="drawCodeCpp"></xblock>
<xblock name="Announcement"></xblock>
<xblock name="TclDialog">oswLoadScript oswLoadFile.tcl
if &#123;&#91;oswGet &#36;transformPath/num_streams&#93; == 0&#125; &#123;
  oswLoadFileManyTypes &#36;transformPath/src  &#123;&#123;&#123;SDIF File&#125; &#123;.sdif&#125;&#125;&#125;
&#125; else &#123;
  set ds &#91;iwidgets::dialogshell .#auto -title &#36;transformPath&#93;
  &#36;ds add Dismiss -text "Dismiss" -command "destroy &#36;ds"
  &#36;ds add Load -text "Load New File..." -command "destroy &#36;ds ; oswLoadFileManyTypes &#36;transformPath/src  &#123;&#123;&#123;SDIF File&#125; &#123;.sdif&#125;&#125;&#125;"
  set dsite &#91;&#36;ds childsite&#93;
  iwidgets::scrolledlistbox &#36;dsite.streams  -vscrollmode dynamic -hscrollmode none  -textbackground white  -labeltext "Streams: "
  eval &#36;dsite.streams insert end &#91;oswGet &#36;transformPath/stream_info&#93;
  pack &#36;dsite.streams -fill both -expand yes
  &#36;ds activate
&#125;</xblock>
<xblock name="Constructor">src = src;</xblock>
<xblock name="PreConstructor"></xblock>
<xblock name="Destructor">
ForgetStreams();</xblock>
<xblock name="Private">
struct IndexedStream &#123;

   State&lt;SDIF_Stream *>  *state;
   SDIF_Stream           stream;

   IndexedStream () &#123;
      state = NULL;
   &#125;

   ~IndexedStream () &#123;
       if (state != NULL) &#123;
           delete state;
       &#125;
    &#125;
&#125;;

typedef stl::map&lt;sdif_int32,IndexedStream,stl::less&lt;sdif_int32> > StreamMap;
StreamMap  xmap;


void IndexStreams () &#123;

   char buffer&#91;16&#93;;
   ostringstream os;

   for (StreamMap::iterator index = xmap.begin();
        index != xmap.end();
        ++index) &#123;
     sprintf (buffer,"%d",index->first);
     index->second.state = new State&lt;SDIF_Stream *>
	(buffer,this,"An SDIF Stream",&amp;(index->second.stream));
     SDIF_Frame *firstFrame = index->second.stream.first;
     os &lt;&lt; "&#123; " &lt;&lt; firstFrame->header.streamID
        &lt;&lt; ' ' &lt;&lt; firstFrame->header.frameType&#91;0&#93;
        &lt;&lt; firstFrame->header.frameType&#91;1&#93;
        &lt;&lt; firstFrame->header.frameType&#91;2&#93;
        &lt;&lt; firstFrame->header.frameType&#91;3&#93;
        &lt;&lt; " &#125; ";
   &#125;
   num_streams = xmap.size();
   stream_info = os.str();
&#125;

void ForgetStreams () &#123;
   xmap.erase(xmap.begin(),xmap.end());
   num_streams = 0;
   stream_info = "";
&#125;


void SetDataFromSource () &#123;

  ForgetStreams();
  int frameCount = 0;
  SDIF_FrameHeader fh;
  SDIF_MatrixHeader	mh;
  FILE *f;
  SDIFresult r;

  r = SDIF_OpenRead(src->c_str(), &amp;f);

  if (r) &#123;
    printf("Couldn't open %s: %s&#92;n", src->c_str(), SDIF_GetErrorString(r));
    return;
  &#125;

  while (!(r = SDIF_ReadFrameHeader(&amp;fh, f))) &#123;
    int i;

    frameCount++;
    if (fh.size &lt; 16) &#123;
      fprintf(stderr, "%s: %s: Frame size count %d too small for frame header&#92;n",
	      Name().c_str(), src->c_str(), fh.size);
      goto close;
    &#125;    
    if ((fh.size &amp; 7) != 0) &#123;
      fprintf(stderr, "%s: Frame size count %d is not a multiple of 8&#92;n",
	      src->c_str(), fh.size);
      goto close;
    &#125;

    SDIF_Frame *newframe = new SDIF_Frame;
    SDIFmem_ReadFrameContents(&amp;fh, f, 
                              (SDIFmem_Frame *)&amp;newframe);
    xmap&#91;fh.streamID&#93;.stream.push_back(newframe);
  &#125;
  
  if (r != ESDIF_END_OF_DATA) &#123;
    fprintf(stderr, "%s: Bad frame header!&#92;n", src->c_str());
    goto close;
  &#125;

  if (0) &#123;
    read_error:
    fprintf(stderr, "Error reading SDIF file &#92;"%s&#92;"&#92;n", src->c_str());
  &#125;
	    
  close:
   cout &lt;&lt; PathName() &lt;&lt; ": " &lt;&lt; xmap.size() &lt;&lt; " streams read.&#92;n";
   IndexStreams();
   SDIF_CloseRead(f);
&#125;</xblock>
<xblock name="Initialize">
SDIFmem_Init(osw::my_memory_allocator,osw::my_memory_deallocator);</xblock>
<xblock name="Global">
#if defined (__GNUC__) || defined(__sgi)
#define __cdecl
#endif


void * __cdecl  my_memory_allocator (int numbytes) &#123;
  return malloc(numbytes);
&#125;

void __cdecl my_memory_deallocator (void *toDelete, int numbytes) &#123;
  free(toDelete);
&#125;</xblock>
<xblock name="TclStartup"></xblock>
<xblock name="SourceFiles">
</xblock>
<xblock name="Libraries"></xblock>
<xblock name="Includes"></xblock>
<xblock name="Syntax">SDIFBuffer &lt;i>options&lt;/i></xblock>
<xblock name="LongDescription"></xblock>
<xblock name="Links"></xblock>
<xblock name="Author"></xblock>
<xblock name="OnTheWeb"></xblock>
<xblock name="HTMLIncludes"></xblock>
<xblock name="Keywords"></xblock>
<xblock name="HTMLIcon"></xblock>
<xblock name="HelpPatch">&lt;?xml version="1.0" ?>
&lt;OSW Version="1.0.0">
&lt;PATCH CLASS="help_SDIFBuffer" Version="1.1beta4" WindowSize="200 230" Background="#CCCCCC">
&lt;TRANSFORM  name="topitch0" x="149.0" y="279.0" width="94" height="25" color="darkgrey" fontface="" fontsize="8">
&lt;COMMAND>sdif::ToPitch&lt;/COMMAND>
&lt;/TRANSFORM>
&lt;TRANSFORM  command="SDIFBuffer -name lick_f0" name="lick_f0" x="506.0" y="113.0" width="154" height="25" color="darkgrey" fontface="" fontsize="8">
	&lt;DATA src="lick5.f0.sdif" />
&lt;/TRANSFORM>
&lt;TRANSFORM  command="MessageBox" name="msgbox0" x="194.0" y="224.0" width="150" height="24" color="darkgrey" fontface="" fontsize="8">

&lt;STATE name="msgbox0/message" value="lick_f0/1" />
&lt;/TRANSFORM>
&lt;TRANSFORM  command="Get load" name="get0" x="288.0" y="173.0" width="58" height="25" color="darkgrey" fontface="" fontsize="8">
&lt;/TRANSFORM>
&lt;TRANSFORM  command="TimeMachine" name="tm0" x="75.0" y="186.0" width="65" height="59" color="darkgrey" fontface="" fontsize="8">
&lt;/TRANSFORM>
&lt;TRANSFORM  command="HSlider" name="hslider0" x="77.0" y="74.0" width="112" height="31" color="darkgrey" fontface="" fontsize="8">

&lt;STATE name="hslider0/min" value="0" />

&lt;STATE name="hslider0/max" value="2" />

&lt;STATE name="hslider0/resolution" value="0.01" />
&lt;/TRANSFORM>
&lt;TRANSFORM  command="FloatBox" name="floatbox0" x="75.0" y="132.0" width="89" height="23" color="darkgrey" fontface="" fontsize="8">

&lt;STATE name="floatbox0/floatIn" value="0" />

&lt;STATE name="floatbox0/max" value="1" />

&lt;STATE name="floatbox0/min" value="0" />

&lt;STATE name="floatbox0/step" value="0.01" />
&lt;/TRANSFORM>
&lt;TRANSFORM  command="Sinewave" name="sinewave0" x="75.0" y="339.0" width="61" height="38" color="darkgrey" fontface="" fontsize="8">

&lt;STATE name="sinewave0/freq" value="328.761" />
&lt;/TRANSFORM>
&lt;TRANSFORM  command="AudioOutput 1 2" name="out0" x="77.0" y="441.0" width="124" height="58" color="darkgrey" fontface="" fontsize="8">
&lt;/TRANSFORM>
&lt;TRANSFORM  command="Button" name="button0" x="228.0" y="77.0" width="19" height="32" color="darkgrey" fontface="" fontsize="8">

&lt;STATE name="button0/color" value="red" />
&lt;/TRANSFORM>
&lt;TRANSFORM  name="tosinusoids0" x="499.0" y="337.0" width="118" height="24" color="darkgrey" fontface="" fontsize="8">
&lt;COMMAND>sdif::ToSinusoids&lt;/COMMAND>

&lt;STATE name="tosinusoids0/interpolate" value="0" />
&lt;/TRANSFORM>
&lt;TRANSFORM  name="toresonances0" x="499.0" y="398.0" width="124" height="24" color="darkgrey" fontface="" fontsize="8">
&lt;COMMAND>sdif::ToResonances&lt;/COMMAND>
&lt;/TRANSFORM>
&lt;CONNECTION  outlet="topitch0/pitch" inlet="sinewave0/freq" vertices="155.0 326.5 140.0 326.5" />
&lt;CONNECTION  outlet="msgbox0/messageOut" inlet="topitch0/stream" vertices="200.0 268.5 247.0 268.5" />
&lt;CONNECTION  outlet="get0/value" inlet="msgbox0/sendnow" vertices="294.0 216.0 348.0 216.0" />
&lt;CONNECTION  outlet="tm0/timeOut" inlet="topitch0/timeIn" vertices="81.0 267.0 155.0 267.0" />
&lt;CONNECTION  outlet="hslider0/floatOut" inlet="floatbox0/floatIn" vertices="83.0 123.5 81.0 123.5" />
&lt;CONNECTION  outlet="floatbox0/floatOut" inlet="tm0/rate" vertices="" />
&lt;CONNECTION  outlet="sinewave0/samplesOut" inlet="out0/mix" vertices="81.0 414.0 203.0 414.0" />
&lt;CONNECTION  outlet="button0/unitOut" inlet="tm0/zero" vertices="234.0 152.5 123.0 152.5" />
&lt;STICKY  x="514.0" y="59.0" width="141.0" height="40.0" color="#FFFF77" fontface="MS Sans Serif" fontsize="8">An SDIFBuffer containing
an SDIF pitch (f0) stream&lt;/STICKY>
&lt;STICKY  x="276.0" y="266.0" width="90.0" height="50.0" color="#FFFF77" fontface="MS Sans Serif" fontsize="8">choose an SDIF
buffer and stream
ID to use&lt;/STICKY>
&lt;STICKY  x="509.0" y="158.0" width="156.0" height="52.0" color="#00ffff" fontface="MS Sans Serif" fontsize="8">Double-click to view info
about the SDIF streams or
change the loaded SDIF file&lt;/STICKY>
&lt;TITLE  x="146.0" y="52.0" color="#FFFFFF" text="control speed (0 to 2)" fontface="MS Sans Serif" fontsize="10" />
&lt;TITLE  x="135.0" y="23.0" color="#FFFFFF" text="SDIFBuffer" fontface="Arial" fontsize="16" />
&lt;TITLE  x="236.0" y="52.0" color="#FFFFFF" text="reset" fontface="MS Sans Serif" fontsize="10" />
&lt;TITLE  x="562.0" y="320.0" color="#FFFFFF" text="see also" fontface="MS Sans Serif" fontsize="10" />
&lt;/PATCH>
&lt;/OSW></xblock>
<xblock name="HelpPatchSupportFiles">lick5.f0.sdif lick5.f0.sdif</xblock>
</osw-external>
